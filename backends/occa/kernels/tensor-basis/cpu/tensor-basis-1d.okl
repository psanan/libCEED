// Copyright (c) 2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory. LLNL-CODE-734707.
// All Rights reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

#ifndef CEED_OCCA_KERNELS_TENSORBASIS_CPU_TENSORBASIS1D_HEADER
#define CEED_OCCA_KERNELS_TENSORBASIS_CPU_TENSORBASIS1D_HEADER

#include "../../kernel-defines.hpp"


static const char *tensorBasis1D_cpu_source = STRINGIFY_SOURCE(

typedef       CeedScalar* dofArray       @dim(P1D, BASIS_COMPONENT_COUNT, elementCount);
typedef const CeedScalar* const_dofArray @dim(P1D, BASIS_COMPONENT_COUNT, elementCount);

typedef       CeedScalar* quadArray       @dim(Q1D, elementCount, BASIS_COMPONENT_COUNT);
typedef const CeedScalar* const_quadArray @dim(Q1D, elementCount, BASIS_COMPONENT_COUNT);

typedef const CeedScalar* quadToDof @dim(P1D, Q1D);
typedef const CeedScalar* dofToQuad @dim(Q1D, P1D);
typedef CeedScalar* elementWeightArray @dim(Q1D, elementCount);

inline void interpElement(const int elementCount,
                          const int element,
                          const int component,
                          @restrict dofToQuad B,
                          @restrict const_dofArray U,
                          @restrict quadArray V) {
  CeedScalar *Ve = &(V(0, element, component));

  for (int q = 0; q < Q1D; ++q) {
    V[q] = 0;
  }

  for (int p = 0; p < P1D; ++p) {
    const CeedScalar Up = U(p, element, component);
    for (int q = 0; q < Q1D; ++q) {
      V[q] += B(q, p) * Up;
    }
  }
}

inline void interpElementTranspose(const int elementCount,
                                   const int element,
                                   const int component,
                                   @restrict quadToDof B,
                                   @restrict const_quadArray U,
                                   @restrict dofArray V) {
  CeedScalar *Ve = &(V(0, element, component));

  for (int p = 0; p < P1D; ++p) {
    V[p] = 0;
  }

  for (int q = 0; q < Q1D; ++q) {
    const CeedScalar Uq = U(q, element, component);
    for (int p = 0; p < P1D; ++p) {
      V[p] += B(p, q) * Uq;
    }
  }
}

@kernel void interp(const CeedInt elementCount,
                    const bool transpose,
                    @restrict quadToDof B_qp,
                    @restrict const CeedScalar *U,
                    @restrict CeedScalar *V) {
  CeedScalar B_pq[P1D * Q1D] @dim(P1D, Q1D);
  if (!TRANSPOSE) {
    for (int q = 0; q < Q1D; ++q) {
      for (int p = 0; p < P1D; ++p) {
        B_pq(p, q) = B_qp(q, p);
      }
    }
  }

  for (int element = 0; element < elementCount; ++element; @tile(16, @outer, @inner)) {
    for (int component = 0; component < BASIS_COMPONENT_COUNT; ++component) {
      if (!TRANSPOSE) {
        interpElement(elementCount, element, component, B_pq, U, V);
      } else {
        interpElementTranspose(elementCount, element, component, B_qp, U, V);
      }
    }
  }
}

@kernel void grad(const CeedInt elementCount,
                  const bool transpose,
                  @restrict quadToDof B_qp,
                  @restrict quadToDof Bx_qp,
                  @restrict const CeedScalar *U,
                  @restrict CeedScalar *V) {
  CeedScalar Bx_pq[P1D * Q1D] @dim(P1D, Q1D);
  if (!TRANSPOSE) {
    for (int q = 0; q < Q1D; ++q) {
      for (int p = 0; p < P1D; ++p) {
        Bx_pq(p, q) = Bx_qp(q, p);
      }
    }
  }

  for (int element = 0; element < elementCount; ++element; @tile(16, @outer, @inner)) {
    for (int component = 0; component < BASIS_COMPONENT_COUNT; ++component) {
      if (!TRANSPOSE) {
        interpElement(elementCount, element, component, Bx_pq, U, V);
      } else {
        interpElementTranspose(elementCount, element, component, Bx_qp, U, V);
      }
    }
  }
}

@kernel void weight(const CeedInt elementCount,
                    @restrict const CeedScalar *qWeights1D,
                    @restrict elementWeightArray W) {
  for (int element = 0; element < elementCount; ++element; @outer) {
    for (int q = 0; q < Q1D; ++q; @inner) {
      W(q, element) = qWeights1D[q];
    }
  }
}

);

#endif
