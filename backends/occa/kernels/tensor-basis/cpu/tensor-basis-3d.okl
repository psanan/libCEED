// Copyright (c) 2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory. LLNL-CODE-734707.
// All Rights reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

#ifndef CEED_OCCA_KERNELS_TENSORBASIS_CPU_TENSORBASIS3D_HEADER
#define CEED_OCCA_KERNELS_TENSORBASIS_CPU_TENSORBASIS3D_HEADER

#include "../../kernel-defines.hpp"


static const char *tensorBasis3D_cpu_source = STRINGIFY_SOURCE(

typedef       CeedScalar* dofArray       @dim(P1D, P1D, P1D, BASIS_COMPONENT_COUNT, elementCount);
typedef const CeedScalar* const_dofArray @dim(P1D, P1D, P1D, BASIS_COMPONENT_COUNT, elementCount);

typedef       CeedScalar* quadArray       @dim(Q1D, Q1D, Q1D, elementCount, BASIS_COMPONENT_COUNT, 3);
typedef const CeedScalar* const_quadArray @dim(Q1D, Q1D, Q1D, elementCount, BASIS_COMPONENT_COUNT, 3);

typedef const CeedScalar* quadToDof @dim(P1D, Q1D);
typedef const CeedScalar* dofToQuad @dim(Q1D, P1D);
typedef CeedScalar* elementWeightArray @dim(Q1D, Q1D, Q1D, elementCount);

inline void interpElement(const int elementCount,
                          const int element,
                          const int component,
                          @restrict quadToDof B,
                          @restrict const_dofArray U,
                          @restrict quadArray V) {
  @restrict const CeedScalar *Ue @dim(P1D, P1D, P1D) = (
    &(U(0, 0, 0, component, element))
  );
  @restrict CeedScalar *Ve @dim(Q1D, Q1D, Q1D) = (
    &(V(0, 0, 0, element, component, 0))
  );

  for (int qz = 0; qz < Q1D; ++qz) {
    for (int qy = 0; qy < Q1D; ++qy) {
      for (int qx = 0; qx < Q1D; ++qx) {
        Ve(qx, qy, qz) = 0;
      }
    }
  }

  for (int pz = 0; pz < P1D; ++pz) {
    CeedScalar V_xy[Q1D][Q1D];
    for (int qy = 0; qy < Q1D; ++qy) {
      for (int qx = 0; qx < Q1D; ++qx) {
        V_xy[qy][qx] = 0;
      }
    }

    for (int py = 0; py < P1D; ++py) {
      CeedScalar V_x[Q1D];
      for (int qx = 0; qx < Q1D; ++qx) {
        V_x[qx] = 0;
      }

      for (int px = 0; px < P1D; ++px) {
        const CeedScalar Up = Ue(px, py, pz);
        for (int qx = 0; qx < Q1D; ++qx) {
          V_x[qx] += B(qx, px) * Up;
        }
      }

      for (int qy = 0; qy < Q1D; ++qy) {
        const CeedScalar wy = B(qy, py);
        for (int qx = 0; qx < Q1D; ++qx) {
          V_xy[qy][qx] += wy * V_x[qx];
        }
      }
    }

    for (int qz = 0; qz < Q1D; ++qz) {
      const CeedScalar wz = B(qz, pz);
      for (int qy = 0; qy < Q1D; ++qy) {
        for (int qx = 0; qx < Q1D; ++qx) {
          Ve(qx, qy, qz) += wz * V_xy[qy][qx];
        }
      }
    }
  }
}

inline void interpElementTranspose(const int elementCount,
                                   const int element,
                                   const int component,
                                   @restrict dofToQuad B,
                                   @restrict const_quadArray U,
                                   @restrict dofArray V) {
  @restrict const CeedScalar *Ue @dim(Q1D, Q1D, Q1D) = (
    &(U(0, 0, 0, element, component, 0))
  );
  @restrict CeedScalar *Ve @dim(P1D, P1D, P1D) = (
    &(V(0, 0, 0, component, element))
  );

  for (int pz = 0; pz < P1D; ++pz) {
    for (int py = 0; py < P1D; ++py) {
      for (int px = 0; px < P1D; ++px) {
        Ve(px, py, pz) = 0;
      }
    }
  }

  for (int qz = 0; qz < Q1D; ++qz) {
    CeedScalar V_xy[P1D][P1D];
    for (int py = 0; py < P1D; ++py) {
      for (int px = 0; px < P1D; ++px) {
        V_xy[py][px] = 0;
      }
    }

    for (int qy = 0; qy < Q1D; ++qy) {
      CeedScalar V_x[P1D];
      for (int px = 0; px < P1D; ++px) {
        V_x[px] = 0;
      }

      for (int qx = 0; qx < Q1D; ++qx) {
        const CeedScalar Uq = Ue(qx, qy, qz);
        for (int px = 0; px < P1D; ++px) {
          V_x[px] += B(px, qx) * Uq;
        }
      }

      for (int py = 0; py < P1D; ++py) {
        const CeedScalar wy = B(py, qy);
        for (int px = 0; px < P1D; ++px) {
          V_xy[py][px] += wy * V_x[px];
        }
      }
    }

    for (int pz = 0; pz < P1D; ++pz) {
      const CeedScalar wz = B(pz, qz);
      for (int py = 0; py < P1D; ++py) {
        for (int px = 0; px < P1D; ++px) {
          Ve(px, py, pz) += wz * V_xy[py][px];
        }
      }
    }
  }
}

inline void gradElement(const int elementCount,
                        const int element,
                        const int component,
                        @restrict dofToQuad B,
                        @restrict dofToQuad Bx,
                        @restrict const_dofArray U,
                        @restrict quadArray V) {
  @restrict const CeedScalar *Ue @dim(P1D, P1D, P1D) = (
    &(U(0, 0, 0, component, element))
  );
  @restrict CeedScalar *Ve_x @dim(Q1D, Q1D, Q1D) = (
    &(V(0, 0, 0, element, component, 0))
  );
  @restrict CeedScalar *Ve_y @dim(Q1D, Q1D, Q1D) = (
    &(V(0, 0, 0, element, component, 1))
  );
  @restrict CeedScalar *Ve_z @dim(Q1D, Q1D, Q1D) = (
    &(V(0, 0, 0, element, component, 2))
  );

  for (int qz = 0; qz < Q1D; ++qz) {
    for (int qy = 0; qy < Q1D; ++qy) {
      for (int qx = 0; qx < Q1D; ++qx) {
        Ve_x(qz, qy, qx) = 0;
        Ve_y(qz, qy, qx) = 0;
        Ve_z(qz, qy, qx) = 0;
      }
    }
  }

  for (int pz = 0; pz < P1D; ++pz) {
    CeedScalar gradXY[Q1D][Q1D][4];
    for (int qy = 0; qy < Q1D; ++qy) {
      for (int qx = 0; qx < Q1D; ++qx) {
        gradXY[qy][qx][0] = 0;
        gradXY[qy][qx][1] = 0;
        gradXY[qy][qx][2] = 0;
      }
    }

    for (int py = 0; py < P1D; ++py) {
      CeedScalar gradX[Q1D][2];
      for (int qx = 0; qx < Q1D; ++qx) {
        gradX[qx][0] = 0;
        gradX[qx][1] = 0;
      }

      for (int px = 0; px < P1D; ++px) {
        const CeedScalar Up = Ue(px, py, pz);
        for (int qx = 0; qx < Q1D; ++qx) {
          gradX[qx][0] += Up * B(qx, px);
          gradX[qx][1] += Up * Bx(qx, px);
        }
      }

      for (int qy = 0; qy < Q1D; ++qy) {
        const CeedScalar wy  = B(qy, py);
        const CeedScalar wDy = Bx(qy, py);
        for (int qx = 0; qx < Q1D; ++qx) {
          const CeedScalar wx  = gradX[qx][0];
          const CeedScalar wDx = gradX[qx][1];
          gradXY[qy][qx][0] += wDx * wy;
          gradXY[qy][qx][1] += wx  * wDy;
          gradXY[qy][qx][2] += wx  * wy;
        }
      }
    }

    for (int qz = 0; qz < Q1D; ++qz) {
      const CeedScalar wz  = B(qz, pz);
      const CeedScalar wDz = Bx(qz, pz);
      for (int qy = 0; qy < Q1D; ++qy) {
        for (int qx = 0; qx < Q1D; ++qx) {
          Ve_x(qz, qy, qx) += gradXY[qy][qx][0] * wz;
          Ve_y(qz, qy, qx) += gradXY[qy][qx][1] * wz;
          Ve_z(qz, qy, qx) += gradXY[qy][qx][2] * wDz;
        }
      }
    }
  }
}

inline void gradElementTranspose(const int elementCount,
                                 const int element,
                                 const int component,
                                 @restrict quadToDof B,
                                 @restrict quadToDof Bx,
                                 @restrict const_quadArray U,
                                 @restrict dofArray V) {
  @restrict const CeedScalar *Ue_x @dim(Q1D, Q1D, Q1D) = (
    &(U(0, 0, 0, element, component, 0))
  );
  @restrict const CeedScalar *Ue_y @dim(Q1D, Q1D, Q1D) = (
    &(U(0, 0, 0, element, component, 1))
  );
  @restrict const CeedScalar *Ue_z @dim(Q1D, Q1D, Q1D) = (
    &(U(0, 0, 0, element, component, 2))
  );
  @restrict CeedScalar *Ve @dim(P1D, P1D, P1D) = (
    &(V(0, 0, 0, component, element))
  );

  for (int qz = 0; qz < Q1D; ++qz) {
    CeedScalar gradXY[P1D][P1D][4];
    for (int py = 0; py < P1D; ++py) {
      for (int px = 0; px < P1D; ++px) {
        gradXY[py][px][0] = 0;
        gradXY[py][px][1] = 0;
        gradXY[py][px][2] = 0;
      }
    }

    for (int qy = 0; qy < Q1D; ++qy) {
      CeedScalar gradX[P1D][4];
      for (int px = 0; px < P1D; ++px) {
        gradX[px][0] = 0;
        gradX[px][1] = 0;
        gradX[px][2] = 0;
      }

      for (int qx = 0; qx < Q1D; ++qx) {
        const CeedScalar Ux = Ue_x(qz, qy, qx);
        const CeedScalar Uy = Ue_y(qz, qy, qx);
        const CeedScalar Uz = Ue_z(qz, qy, qx);
        for (int px = 0; px < P1D; ++px) {
          const CeedScalar wx  = B(px, qx);
          const CeedScalar wDx = Bx(px, qx);
          gradX[px][0] += Ux * wDx;
          gradX[px][1] += Uy * wx;
          gradX[px][2] += Uz * wx;
        }
      }

      for (int py = 0; py < P1D; ++py) {
        const CeedScalar wy  = B(py, qy);
        const CeedScalar wDy = Bx(py, qy);
        for (int px = 0; px < P1D; ++px) {
          gradXY[py][px][0] += gradX[px][0] * wy;
          gradXY[py][px][1] += gradX[px][1] * wDy;
          gradXY[py][px][2] += gradX[px][2] * wy;
        }
      }
    }

    for (int pz = 0; pz < P1D; ++pz) {
      const CeedScalar wz  = B(pz, qz);
      const CeedScalar wDz = Bx(pz, qz);
      for (int py = 0; py < P1D; ++py) {
        for (int px = 0; px < P1D; ++px) {
          Ve(px, py, pz) += ((gradXY[py][px][0] * wz) +
                             (gradXY[py][px][1] * wz) +
                             (gradXY[py][px][2] * wDz));
        }
      }
    }
  }
}

@kernel void interp(const CeedInt elementCount,
                    const bool transpose,
                    @restrict quadToDof B,
                    @restrict const CeedScalar *U,
                    @restrict CeedScalar *V) {
  CeedScalar B_pq[Q1D * P1D] @dim(P1D, Q1D);
  if (TRANSPOSE) {
    for (int q = 0; q < Q1D; ++q) {
      for (int p = 0; p < P1D; ++p) {
        B_pq(q, p) = B(p, q);
      }
    }
  }

  for (int element = 0; element < elementCount; ++element; @tile(16, @outer, @inner)) {
    for (int component = 0; component < BASIS_COMPONENT_COUNT; ++component) {
      if (!TRANSPOSE) {
        interpElement(elementCount, element, component, B, U, V);
      } else {
        interpElementTranspose(elementCount, element, component, B, U, V);
      }
    }
  }
}

@kernel void grad(const CeedInt elementCount,
                  const bool transpose,
                  @restrict quadToDof B_qp,
                  @restrict quadToDof Bx_qp,
                  @restrict const CeedScalar *U,
                  @restrict CeedScalar *V) {
  CeedScalar B_pq[P1D * Q1D]  @dim(P1D, Q1D);
  CeedScalar Bx_pq[P1D * Q1D] @dim(P1D, Q1D);
  if (TRANSPOSE) {
    for (int q = 0; q < Q1D; ++q) {
      for (int p = 0; p < P1D; ++p) {
        B_pq(q, p)  = B_qp(p, q);
        Bx_pq(q, p) = Bx_qp(p, q);
      }
    }
  }

  for (int element = 0; element < elementCount; ++element; @tile(16, @outer, @inner)) {
    for (int component = 0; component < BASIS_COMPONENT_COUNT; ++component) {
      if (!TRANSPOSE) {
        gradElement(elementCount, element, component, B_pq, Bx_pq, U, V);
      } else {
        gradElementTranspose(elementCount, element, component, B_pq, Bx_pq, U, V);
      }
    }
  }
}

@kernel void weight(const CeedInt elementCount,
                    @restrict const CeedScalar *qWeights1D,
                    @restrict elementWeightArray W) {
  for (int element = 0; element < elementCount; ++element; @outer) {
    for (int qz = 0; qz < Q1D; ++qz; @inner) {
      const CeedScalar wz = qWeights1D[qz];
      for (int qy = 0; qy < Q1D; ++qy; @inner) {
        const CeedScalar wy = qWeights1D[qy];
        for (int qx = 0; qx < Q1D; ++qx; @inner) {
          W(qx, qy, qz, element) = qWeights1D[qx] * wy * wz;
        }
      }
    }
  }
}

);

#endif
