// Copyright (c) 2019, Lawrence Livermore National Security, LLC.
// Produced at the Lawrence Livermore National Laboratory. LLNL-CODE-734707.
// All Rights reserved. See files LICENSE and NOTICE for details.
//
// This file is part of CEED, a collection of benchmarks, miniapps, software
// libraries and APIs for efficient high-order finite element and spectral
// element discretizations for exascale applications. For more information and
// source code availability see http://github.com/ceed.
//
// The CEED research is supported by the Exascale Computing Project 17-SC-20-SC,
// a collaborative effort of two U.S. Department of Energy organizations (Office
// of Science and the National Nuclear Security Administration) responsible for
// the planning and preparation of a capable exascale ecosystem, including
// software, applications, hardware, advanced system engineering and early
// testbed platforms, in support of the nation's exascale computing imperative.

#ifndef CEED_OCCA_KERNELS_TENSORBASIS_CPU_TENSORBASIS3D_HEADER
#define CEED_OCCA_KERNELS_TENSORBASIS_CPU_TENSORBASIS3D_HEADER

#include "../../kernel-defines.hpp"


static const char *tensorBasis3D_cpu_source = STRINGIFY_SOURCE(

@kernel void interp(const CeedInt elementCount,
                    const bool transpose,
                    @restrict dofToQuadMap B,
                    @restrict const CeedScalar *U,
                    @restrict CeedScalar *V) {
  for (int element = 0; element < elementCount; ++element; @outer) {
  }
}

@kernel void grad(const CeedInt elementCount,
                  const bool transpose,
                  @restrict dofToQuadMap B,
                  @restrict dofToQuadMap Bx,
                  @restrict const CeedScalar *U,
                  @restrict CeedScalar *V) {
  for (int element = 0; element < elementCount; ++element; @outer) {
  }
}

@kernel void weight(const CeedInt elementCount,
                    @restrict const CeedScalar *qWeights1D,
                    @restrict elementWeightArray W) {
  for (int element = 0; element < elementCount; ++element; @outer) {
    for (int qz = 0; qz < Q1D; ++qz; @inner) {
      for (int qy = 0; qy < Q1D; ++qy; @inner) {
        for (int qx = 0; qx < Q1D; ++qx; @inner) {
          if (element < elementCount) {
            W(qx, qy, qz, element) = qWeights1D[qx] * qWeights1D[qy] * qWeights1D[qz];
          }
        }
      }
    }
  }
}

);

#endif
